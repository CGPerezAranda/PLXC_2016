
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\011\000\002\006\004\000" +
    "\002\006\005\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\011\000\002\006\007\000\002\006" +
    "\007\000\002\010\003\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\005\006\000\002\005\012\000\002\005\012" +
    "\000\002\005\014\000\002\005\012\000\002\012\005\000" +
    "\002\012\003\000\002\013\007\000\002\013\007\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\010\000\002\007\011\000\002\007\010" +
    "\000\002\007\007\000\002\007\003\000\002\007\005\000" +
    "\002\007\004\000\002\007\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\005\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\007\000\002\014\006\000\002\014" +
    "\011\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\007\000\002\015\006\000\002\015\012\000" +
    "\002\016\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\007\000\002\016\006\000\002\017\003\000\002\017" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\003\000\002\022\005\000\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\054\004\017\005\020\012\012\013\022\014" +
    "\032\016\026\023\004\041\013\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\040\005\020" +
    "\023\004\046\015\047\031\050\005\055\010\056\011\057" +
    "\025\060\024\061\023\062\006\063\021\064\033\065\030" +
    "\066\007\001\002\000\040\005\020\023\004\046\015\047" +
    "\031\050\005\055\010\056\011\057\025\060\024\061\023" +
    "\062\006\063\021\064\033\065\030\066\007\001\002\000" +
    "\070\006\uffb9\007\167\010\uffb9\015\uffb9\017\uffb9\020\uffb9" +
    "\021\163\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\171\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\170\034\165\035\164" +
    "\036\166\037\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\053" +
    "\uffb9\054\uffb9\001\002\000\052\006\uffb6\010\uffb6\015\uffb6" +
    "\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\037\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\053\uffb6\054\uffb6\001\002\000\004\062" +
    "\366\001\002\000\004\062\346\001\002\000\004\005\342" +
    "\001\002\000\054\004\017\005\020\012\012\013\022\014" +
    "\032\016\026\023\004\041\013\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\004\002\337" +
    "\001\002\000\040\005\020\023\004\046\015\047\031\050" +
    "\005\055\010\056\011\057\025\060\024\061\023\062\006" +
    "\063\021\064\033\065\030\066\007\001\002\000\014\015" +
    "\335\022\041\023\042\024\043\025\044\001\002\000\004" +
    "\005\320\001\002\000\040\005\020\023\004\046\015\047" +
    "\031\050\005\055\010\056\011\057\025\060\024\061\023" +
    "\062\006\063\021\064\033\065\030\066\007\001\002\000" +
    "\052\006\uffd7\010\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\037\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\053\uffd7" +
    "\054\uffd7\001\002\000\054\004\017\005\020\012\012\013" +
    "\022\014\032\016\026\023\004\041\013\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\004" +
    "\062\305\001\002\000\004\062\300\001\002\000\004\062" +
    "\265\001\002\000\004\005\242\001\002\000\056\002\001" +
    "\004\017\005\020\012\012\013\022\014\032\016\026\023" +
    "\004\041\013\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\006\063\021\064\033\065" +
    "\030\066\007\001\002\000\052\006\uffd5\010\uffd5\015\uffd5" +
    "\017\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\037\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\053\uffd5\054\uffd5\001\002\000\040\005" +
    "\020\023\004\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\006\063\021\064\033\065" +
    "\030\066\007\001\002\000\004\005\035\001\002\000\052" +
    "\006\uffd6\010\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\037\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\053\uffd6\054" +
    "\uffd6\001\002\000\060\002\ufffe\004\ufffe\005\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\016\ufffe\023\ufffe\041\ufffe\042\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\001" +
    "\002\000\042\005\020\015\036\023\004\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\042" +
    "\005\073\023\004\040\071\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\004\006\233\001" +
    "\002\000\014\015\045\022\041\023\042\024\043\025\044" +
    "\001\002\000\040\005\020\023\004\046\015\047\031\050" +
    "\005\055\010\056\011\057\025\060\024\061\023\062\006" +
    "\063\021\064\033\065\030\066\007\001\002\000\040\005" +
    "\020\023\004\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\006\063\021\064\033\065" +
    "\030\066\007\001\002\000\040\005\020\023\004\046\015" +
    "\047\031\050\005\055\010\056\011\057\025\060\024\061" +
    "\023\062\006\063\021\064\033\065\030\066\007\001\002" +
    "\000\040\005\020\023\004\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\044\005\052\023" +
    "\004\040\047\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\046\063\021\064\033\065" +
    "\030\066\007\067\051\001\002\000\070\006\uffb9\007\167" +
    "\010\uffb9\015\uffb9\017\uffb9\020\uffb9\021\163\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\171\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\170\034\165\035\164\036\166\037\uffb9\042" +
    "\uffb9\043\162\044\172\045\uffb9\053\uffb9\054\uffb9\001\002" +
    "\000\042\005\073\023\004\040\071\046\015\047\031\050" +
    "\005\055\010\056\011\057\025\060\024\061\023\062\006" +
    "\063\021\064\033\065\030\066\007\001\002\000\052\006" +
    "\ufff1\010\ufff1\015\ufff1\017\131\020\134\022\041\023\042" +
    "\024\043\025\044\027\133\030\127\031\126\032\ufff1\037" +
    "\132\042\ufff1\043\ufff1\044\ufff1\045\ufff1\053\ufff1\054\ufff1" +
    "\001\002\000\004\032\157\001\002\000\044\005\052\023" +
    "\004\040\047\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\046\063\021\064\033\065" +
    "\030\066\007\067\051\001\002\000\012\015\151\032\065" +
    "\043\064\044\066\001\002\000\012\015\060\032\056\043" +
    "\055\044\057\001\002\000\044\005\052\023\004\040\047" +
    "\046\015\047\031\050\005\055\010\056\011\057\025\060" +
    "\024\061\023\062\046\063\021\064\033\065\030\066\007" +
    "\067\051\001\002\000\044\005\052\023\004\040\047\046" +
    "\015\047\031\050\005\055\010\056\011\057\025\060\024" +
    "\061\023\062\046\063\021\064\033\065\030\066\007\067" +
    "\051\001\002\000\044\005\052\023\004\040\047\046\015" +
    "\047\031\050\005\055\010\056\011\057\025\060\024\061" +
    "\023\062\046\063\021\064\033\065\030\066\007\067\051" +
    "\001\002\000\042\005\020\006\uffda\023\004\046\015\047" +
    "\031\050\005\055\010\056\011\057\025\060\024\061\023" +
    "\062\006\063\021\064\033\065\030\066\007\001\002\000" +
    "\014\006\uffdc\022\041\023\042\024\043\025\044\001\002" +
    "\000\052\006\uffe9\010\uffe9\015\uffe9\017\uffe9\020\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\037\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\053" +
    "\uffe9\054\uffe9\001\002\000\052\006\uffee\010\uffee\015\uffee" +
    "\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\037\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\053\uffee\054\uffee\001\002\000\046\005" +
    "\052\023\004\040\047\046\015\047\031\050\005\051\100" +
    "\055\010\056\011\057\025\060\024\061\023\062\046\063" +
    "\021\064\033\065\030\066\007\067\051\001\002\000\042" +
    "\005\073\023\004\040\071\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\044\005\052\023" +
    "\004\040\047\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\046\063\021\064\033\065" +
    "\030\066\007\067\051\001\002\000\052\006\uffad\010\uffad" +
    "\015\uffad\017\uffad\020\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\037\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\053\uffad\054\uffad\001\002\000" +
    "\052\006\uffeb\010\uffeb\015\uffeb\017\uffeb\020\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\037\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\053\uffeb" +
    "\054\uffeb\001\002\000\042\005\073\023\004\040\071\046" +
    "\015\047\031\050\005\055\010\056\011\057\025\060\024" +
    "\061\023\062\006\063\021\064\033\065\030\066\007\001" +
    "\002\000\026\017\131\020\134\022\041\023\042\024\043" +
    "\025\044\027\133\030\127\031\126\037\132\001\002\000" +
    "\042\005\073\023\004\040\071\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\052\006\uffac" +
    "\010\uffac\015\uffac\017\uffac\020\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\065\037\uffac" +
    "\042\uffac\043\075\044\076\045\uffac\053\uffac\054\uffac\001" +
    "\002\000\044\005\073\023\004\040\071\046\015\047\031" +
    "\050\005\051\100\055\010\056\011\057\025\060\024\061" +
    "\023\062\006\063\021\064\033\065\030\066\007\001\002" +
    "\000\042\005\073\023\004\040\071\046\015\047\031\050" +
    "\005\055\010\056\011\057\025\060\024\061\023\062\006" +
    "\063\021\064\033\065\030\066\007\001\002\000\052\006" +
    "\uffad\010\uffad\015\uffad\017\uffad\020\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad\037" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\053\uffad\054\uffad" +
    "\001\002\000\004\062\103\001\002\000\052\006\uffae\010" +
    "\uffae\015\uffae\017\uffae\020\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\037\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\053\uffae\054\uffae\001\002" +
    "\000\052\006\uffaf\010\uffaf\015\uffaf\017\uffaf\020\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\037\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\053" +
    "\uffaf\054\uffaf\001\002\000\006\045\104\052\105\001\002" +
    "\000\044\005\052\023\004\040\047\046\015\047\031\050" +
    "\005\055\010\056\011\057\025\060\024\061\023\062\046" +
    "\063\021\064\033\065\030\066\007\067\051\001\002\000" +
    "\040\005\020\023\004\046\015\047\031\050\005\055\010" +
    "\056\011\057\025\060\024\061\023\062\006\063\021\064" +
    "\033\065\030\066\007\001\002\000\014\022\041\023\042" +
    "\024\043\025\044\053\107\001\002\000\040\005\020\023" +
    "\004\046\015\047\031\050\005\055\010\056\011\057\025" +
    "\060\024\061\023\062\006\063\021\064\033\065\030\066" +
    "\007\001\002\000\016\022\041\023\042\024\043\025\044" +
    "\045\112\054\111\001\002\000\040\005\020\023\004\046" +
    "\015\047\031\050\005\055\010\056\011\057\025\060\024" +
    "\061\023\062\006\063\021\064\033\065\030\066\007\001" +
    "\002\000\046\005\052\023\004\040\047\046\015\047\031" +
    "\050\005\051\100\055\010\056\011\057\025\060\024\061" +
    "\023\062\046\063\021\064\033\065\030\066\007\067\051" +
    "\001\002\000\052\006\uffe0\010\uffe0\015\uffe0\017\uffe0\020" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\037\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\053\uffe0\054\uffe0\001\002\000\052\006\uffe3\010\uffe3" +
    "\015\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\037\uffe3\042\uffe3" +
    "\043\064\044\066\045\uffe3\053\uffe3\054\uffe3\001\002\000" +
    "\052\006\uffe2\010\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\037\uffe2\042\uffe2\043\055\044\057\045\uffe2\053\uffe2" +
    "\054\uffe2\001\002\000\014\022\041\023\042\024\043\025" +
    "\044\045\117\001\002\000\042\005\073\023\004\040\071" +
    "\046\015\047\031\050\005\055\010\056\011\057\025\060" +
    "\024\061\023\062\006\063\021\064\033\065\030\066\007" +
    "\001\002\000\052\006\uffe1\010\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\037\uffe1\042\uffe1\043\075\044\076\045" +
    "\uffe1\053\uffe1\054\uffe1\001\002\000\010\032\065\043\064" +
    "\044\066\001\002\000\052\006\uffe4\010\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\037\uffe4\042\uffe4\043\055\044" +
    "\057\045\uffe4\053\uffe4\054\uffe4\001\002\000\030\006\130" +
    "\017\131\020\134\022\041\023\042\024\043\025\044\027" +
    "\133\030\127\031\126\037\132\001\002\000\012\006\125" +
    "\032\065\043\075\044\076\001\002\000\052\006\uffaa\010" +
    "\uffaa\015\uffaa\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\037\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\053\uffaa\054\uffaa\001\002" +
    "\000\040\005\020\023\004\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\040\005\020\023" +
    "\004\046\015\047\031\050\005\055\010\056\011\057\025" +
    "\060\024\061\023\062\006\063\021\064\033\065\030\066" +
    "\007\001\002\000\052\006\uffb8\010\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\037\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\053\uffb8\054\uffb8\001\002\000\040\005\020\023" +
    "\004\046\015\047\031\050\005\055\010\056\011\057\025" +
    "\060\024\061\023\062\006\063\021\064\033\065\030\066" +
    "\007\001\002\000\040\005\020\023\004\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\040" +
    "\005\020\023\004\046\015\047\031\050\005\055\010\056" +
    "\011\057\025\060\024\061\023\062\006\063\021\064\033" +
    "\065\030\066\007\001\002\000\040\005\020\023\004\046" +
    "\015\047\031\050\005\055\010\056\011\057\025\060\024" +
    "\061\023\062\006\063\021\064\033\065\030\066\007\001" +
    "\002\000\052\006\uffb5\010\uffb5\015\uffb5\017\uffb5\020\uffb5" +
    "\022\041\023\042\024\043\025\044\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\037\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\053\uffb5\054\uffb5\001\002\000\052\006\uffb1\010\uffb1\015" +
    "\uffb1\017\uffb1\020\uffb1\022\041\023\042\024\043\025\044" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\037\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\053\uffb1\054\uffb1\001\002\000\052" +
    "\006\uffb0\010\uffb0\015\uffb0\017\uffb0\020\uffb0\022\041\023" +
    "\042\024\043\025\044\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\037\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\053\uffb0\054" +
    "\uffb0\001\002\000\052\006\uffb4\010\uffb4\015\uffb4\017\uffb4" +
    "\020\uffb4\022\041\023\042\024\043\025\044\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\037\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\053\uffb4\054\uffb4\001\002\000\052\006\uffb3\010" +
    "\uffb3\015\uffb3\017\uffb3\020\uffb3\022\041\023\042\024\043" +
    "\025\044\027\uffb3\030\uffb3\031\uffb3\032\uffb3\037\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\053\uffb3\054\uffb3\001\002" +
    "\000\052\006\uffb2\010\uffb2\015\uffb2\017\uffb2\020\uffb2\022" +
    "\041\023\042\024\043\025\044\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\037\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\053" +
    "\uffb2\054\uffb2\001\002\000\052\006\uffab\010\uffab\015\uffab" +
    "\017\uffab\020\uffab\022\uffab\023\uffab\024\uffab\025\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\037\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\053\uffab\054\uffab\001\002\000\052\006" +
    "\uffaf\010\uffaf\015\uffaf\017\uffaf\020\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\037" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\053\uffaf\054\uffaf" +
    "\001\002\000\052\006\uffec\010\uffec\015\uffec\017\uffec\020" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\037\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\053\uffec\054\uffec\001\002\000\052\006\uffed\010\uffed" +
    "\015\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\056\037\uffed\042\uffed" +
    "\043\055\044\057\045\uffed\053\uffed\054\uffed\001\002\000" +
    "\052\006\uffea\010\uffea\015\uffea\017\uffea\020\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\037\uffea\042\uffea\043\uffea\044\uffea\045\uffea\053\uffea" +
    "\054\uffea\001\002\000\052\006\uffef\010\uffef\015\uffef\017" +
    "\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\037\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\053\uffef\054\uffef\001\002\000\042\005\020" +
    "\006\uffd9\023\004\046\015\047\031\050\005\055\010\056" +
    "\011\057\025\060\024\061\023\062\006\063\021\064\033" +
    "\065\030\066\007\001\002\000\014\006\uffdd\022\041\023" +
    "\042\024\043\025\044\001\002\000\036\006\130\017\131" +
    "\020\134\022\041\023\042\024\043\025\044\027\133\030" +
    "\127\031\126\032\ufff1\037\132\043\ufff1\044\ufff1\001\002" +
    "\000\012\006\125\032\065\043\064\044\066\001\002\000" +
    "\012\006\156\032\056\043\055\044\057\001\002\000\052" +
    "\006\uffe6\010\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\037\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\053\uffe6\054" +
    "\uffe6\001\002\000\004\067\160\001\002\000\052\006\uffe5" +
    "\010\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\037\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\053\uffe5\054\uffe5\001" +
    "\002\000\052\006\ufff0\010\ufff0\015\ufff0\017\131\020\134" +
    "\022\041\023\042\024\043\025\044\027\133\030\127\031" +
    "\126\032\ufff0\037\132\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\053\ufff0\054\ufff0\001\002\000\044\005\052\023\004\040" +
    "\047\046\015\047\031\050\005\055\010\056\011\057\025" +
    "\060\024\061\023\062\046\063\021\064\033\065\030\066" +
    "\007\067\051\001\002\000\052\006\uffb7\010\uffb7\015\uffb7" +
    "\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\037\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\053\uffb7\054\uffb7\001\002\000\040\005" +
    "\020\023\004\046\015\047\031\050\005\055\010\056\011" +
    "\057\025\060\024\061\023\062\006\063\021\064\033\065" +
    "\030\066\007\001\002\000\040\005\020\023\004\046\015" +
    "\047\031\050\005\055\010\056\011\057\025\060\024\061" +
    "\023\062\006\063\021\064\033\065\030\066\007\001\002" +
    "\000\040\005\020\023\004\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\040\005\020\023" +
    "\004\046\015\047\031\050\005\055\010\056\011\057\025" +
    "\060\024\061\023\062\006\063\210\064\033\065\030\066" +
    "\007\001\002\000\040\005\020\023\004\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\046" +
    "\005\073\023\004\040\175\041\174\046\015\047\031\050" +
    "\005\055\010\056\011\057\025\060\024\061\023\062\006" +
    "\063\021\064\033\065\030\066\007\067\176\001\002\000" +
    "\044\005\052\023\004\040\047\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\046\063" +
    "\021\064\033\065\030\066\007\067\051\001\002\000\052" +
    "\006\uffe8\010\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\037\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\053\uffe8\054" +
    "\uffe8\001\002\000\040\005\020\023\004\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\042" +
    "\005\073\023\004\040\071\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\052\006\uffc2\010" +
    "\uffc2\015\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\037\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\053\uffc2\054\uffc2\001\002" +
    "\000\052\006\uffc3\010\uffc3\015\uffc3\017\131\020\134\022" +
    "\041\023\042\024\043\025\044\027\133\030\127\031\126" +
    "\032\uffc3\037\132\042\uffc3\043\uffc3\044\uffc3\045\uffc3\053" +
    "\uffc3\054\uffc3\001\002\000\052\006\uffc1\010\uffc1\015\uffc1" +
    "\017\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\037\uffc1\042\uffc1\043\075" +
    "\044\076\045\uffc1\053\uffc1\054\uffc1\001\002\000\052\006" +
    "\uffc0\010\uffc0\015\uffc0\017\131\020\134\022\041\023\042" +
    "\024\043\025\044\027\133\030\127\031\126\032\uffc0\037" +
    "\132\042\uffc0\043\uffc0\044\uffc0\045\uffc0\053\uffc0\054\uffc0" +
    "\001\002\000\016\022\041\023\042\024\043\025\044\042" +
    "\uff95\045\205\001\002\000\004\042\204\001\002\000\052" +
    "\006\uffba\010\uffba\015\uffba\017\uffba\020\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\037\uffba\042\uffba\043\uffba\044\uffba\045\uffba\053\uffba\054" +
    "\uffba\001\002\000\040\005\020\023\004\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\004" +
    "\042\uff96\001\002\000\052\006\uffcb\010\uffcb\015\uffcb\017" +
    "\uffcb\020\uffcb\022\041\023\042\024\043\025\044\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\037\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\053\uffcb\054\uffcb\001\002\000\014\010\215" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\001\002\000\014\010" +
    "\212\022\041\023\042\024\043\025\044\001\002\000\054" +
    "\006\uffbf\010\uffbf\015\uffbf\017\uffbf\020\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\213\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\037\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\053" +
    "\uffbf\054\uffbf\001\002\000\040\005\020\023\004\046\015" +
    "\047\031\050\005\055\010\056\011\057\025\060\024\061" +
    "\023\062\006\063\021\064\033\065\030\066\007\001\002" +
    "\000\052\006\uffbb\010\uffbb\015\uffbb\017\uffbb\020\uffbb\022" +
    "\041\023\042\024\043\025\044\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\037\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\053" +
    "\uffbb\054\uffbb\001\002\000\056\006\uffbe\007\216\010\uffbe" +
    "\015\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\217\027\uffbe\030\uffbe\031\uffbe\032\uffbe\037\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\053\uffbe\054\uffbe\001" +
    "\002\000\004\063\221\001\002\000\040\005\020\023\004" +
    "\046\015\047\031\050\005\055\010\056\011\057\025\060" +
    "\024\061\023\062\006\063\021\064\033\065\030\066\007" +
    "\001\002\000\052\006\uffbd\010\uffbd\015\uffbd\017\uffbd\020" +
    "\uffbd\022\041\023\042\024\043\025\044\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\037\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\053\uffbd\054\uffbd\001\002\000\004\010\222\001\002" +
    "\000\052\006\uffbc\010\uffbc\015\uffbc\017\uffbc\020\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\037\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\053" +
    "\uffbc\054\uffbc\001\002\000\052\006\uffc8\010\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\022\041\023\042\024\043\025\044\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\037\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\053\uffc8\054\uffc8\001\002\000\052\006" +
    "\uffca\010\uffca\015\uffca\017\uffca\020\uffca\022\041\023\042" +
    "\024\043\025\044\027\uffca\030\uffca\031\uffca\032\uffca\037" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\053\uffca\054\uffca" +
    "\001\002\000\052\006\uffc9\010\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\022\041\023\042\024\043\025\044\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\037\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\053\uffc9\054\uffc9\001\002\000\052\006\uffe7\010\uffe7" +
    "\015\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\037\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\053\uffe7\054\uffe7\001\002\000" +
    "\052\006\uffc6\010\uffc6\015\uffc6\017\uffc6\020\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\053\uffc6" +
    "\054\uffc6\001\002\000\052\006\uffc5\010\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\037\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\053\uffc5\054\uffc5\001\002\000\052\006\uffc7" +
    "\010\uffc7\015\uffc7\017\uffc7\020\uffc7\022\uffc7\023\uffc7\024" +
    "\043\025\044\027\uffc7\030\uffc7\031\uffc7\032\uffc7\037\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\053\uffc7\054\uffc7\001" +
    "\002\000\052\006\uffcc\010\uffcc\015\uffcc\017\uffcc\020\uffcc" +
    "\022\uffcc\023\uffcc\024\043\025\044\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\037\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\053\uffcc\054\uffcc\001\002\000\054\004\017\005\020\012" +
    "\012\013\022\014\032\016\026\023\004\041\013\046\015" +
    "\047\031\050\005\055\010\056\011\057\025\060\024\061" +
    "\023\062\006\063\021\064\033\065\030\066\007\001\002" +
    "\000\062\002\ufff2\004\ufff2\005\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\023\ufff2\041\ufff2\042\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002" +
    "\000\012\015\236\032\065\043\075\044\076\001\002\000" +
    "\042\005\020\006\uffd8\023\004\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\014\006\uffdb" +
    "\022\041\023\042\024\043\025\044\001\002\000\052\006" +
    "\uffce\010\uffce\015\uffce\017\uffce\020\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\027\uffce\030\uffce\031\uffce\032\uffce\037" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\053\uffce\054\uffce" +
    "\001\002\000\060\002\uffff\004\uffff\005\uffff\012\uffff\013" +
    "\uffff\014\uffff\016\uffff\023\uffff\041\uffff\042\uffff\046\uffff" +
    "\047\uffff\050\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\001\002" +
    "\000\046\005\052\023\004\040\047\041\243\046\015\047" +
    "\031\050\005\055\010\056\011\057\025\060\024\061\023" +
    "\062\046\063\021\064\033\065\030\066\007\067\051\001" +
    "\002\000\040\005\020\023\004\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\036\006\253" +
    "\017\131\020\134\022\041\023\042\024\043\025\044\027" +
    "\133\030\127\031\126\032\ufff1\037\132\043\ufff1\044\ufff1" +
    "\001\002\000\012\006\251\032\065\043\064\044\066\001" +
    "\002\000\012\006\247\032\056\043\055\044\057\001\002" +
    "\000\004\015\250\001\002\000\062\002\ufffb\004\ufffb\005" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\023\ufffb" +
    "\041\ufffb\042\ufffb\046\ufffb\047\ufffb\050\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\004\015\252\001\002\000" +
    "\062\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\016\ufffc\023\ufffc\041\ufffc\042\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\001\002\000" +
    "\004\015\254\001\002\000\062\002\ufffd\004\ufffd\005\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\023\ufffd\041" +
    "\ufffd\042\ufffd\046\ufffd\047\ufffd\050\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\001\002\000\016\022\041\023\042\024\043" +
    "\025\044\042\uff93\045\262\001\002\000\004\042\257\001" +
    "\002\000\004\006\260\001\002\000\004\015\261\001\002" +
    "\000\062\002\ufffa\004\ufffa\005\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\023\ufffa\041\ufffa\042\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\001\002" +
    "\000\040\005\020\023\004\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\004\042\uff94\001" +
    "\002\000\052\006\uffd1\010\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\053\uffd1\054\uffd1\001\002\000\056\006\uff9d\007\267\010" +
    "\uff9d\015\uff9d\017\uff9d\020\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\270\027\uff9d\030\uff9d\031\uff9d\032\uff9d\037" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\266\053\uff9d\054\uff9d" +
    "\001\002\000\004\062\265\001\002\000\004\063\274\001" +
    "\002\000\040\005\020\023\004\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\052\006\uff9b" +
    "\010\uff9b\015\uff9b\017\uff9b\020\uff9b\022\041\023\042\024" +
    "\043\025\044\027\uff9b\030\uff9b\031\uff9b\032\uff9b\037\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\272\053\uff9b\054\uff9b\001" +
    "\002\000\004\062\265\001\002\000\052\006\uff9a\010\uff9a" +
    "\015\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\037\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\053\uff9a\054\uff9a\001\002\000" +
    "\004\010\275\001\002\000\052\006\uff99\010\uff99\015\uff99" +
    "\017\uff99\020\uff99\022\uff99\023\uff99\024\uff99\025\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\037\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\053\uff99\054\uff99\001\002\000\052\006" +
    "\uff9c\010\uff9c\015\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\037" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\053\uff9c\054\uff9c" +
    "\001\002\000\052\006\uffd0\010\uffd0\015\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\037\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\053\uffd0\054\uffd0\001\002\000\004\026\301\001\002" +
    "\000\040\005\020\023\004\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\052\006\uff92\010" +
    "\uff92\015\uff92\017\uff92\020\uff92\022\041\023\042\024\043" +
    "\025\044\027\uff92\030\uff92\031\uff92\032\uff92\037\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\303\053\uff92\054\uff92\001\002" +
    "\000\004\062\300\001\002\000\052\006\uff91\010\uff91\015" +
    "\uff91\017\uff91\020\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\037\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\053\uff91\054\uff91\001\002\000\052" +
    "\006\uff98\010\uff98\015\uff98\017\uff98\020\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\037\uff98\042\uff98\043\uff98\044\uff98\045\307\053\uff98\054" +
    "\uff98\001\002\000\052\006\uffd2\010\uffd2\015\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\053\uffd2\054\uffd2\001\002\000\004\062\305\001" +
    "\002\000\052\006\uff97\010\uff97\015\uff97\017\uff97\020\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\037\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\053\uff97\054\uff97\001\002\000\004\012\312\001\002\000" +
    "\004\005\313\001\002\000\042\005\073\023\004\040\071" +
    "\046\015\047\031\050\005\055\010\056\011\057\025\060" +
    "\024\061\023\062\006\063\021\064\033\065\030\066\007" +
    "\001\002\000\012\006\315\032\065\043\075\044\076\001" +
    "\002\000\004\015\316\001\002\000\062\002\ufff4\004\ufff4" +
    "\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\023" +
    "\ufff4\041\ufff4\042\ufff4\046\ufff4\047\ufff4\050\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\001\002\000\014\006\130\022\041" +
    "\023\042\024\043\025\044\001\002\000\046\005\052\023" +
    "\004\040\047\046\015\047\031\050\005\051\100\055\010" +
    "\056\011\057\025\060\024\061\023\062\046\063\021\064" +
    "\033\065\030\066\007\067\051\001\002\000\004\006\333" +
    "\001\002\000\012\006\331\032\065\043\064\044\066\001" +
    "\002\000\012\006\324\032\056\043\055\044\057\001\002" +
    "\000\054\004\017\005\020\012\012\013\022\014\032\016" +
    "\026\023\004\041\013\046\015\047\031\050\005\055\010" +
    "\056\011\057\025\060\024\061\023\062\006\063\021\064" +
    "\033\065\030\066\007\001\002\000\062\002\ufff7\004\ufff7" +
    "\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\023" +
    "\ufff7\041\ufff7\042\ufff7\046\ufff7\047\ufff7\050\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\001\002\000\062\002\uffde\004\uffde" +
    "\005\uffde\011\327\012\uffde\013\uffde\014\uffde\016\uffde\023" +
    "\uffde\041\uffde\042\uffde\046\uffde\047\uffde\050\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\001\002\000\054\004\017\005\020" +
    "\012\012\013\022\014\032\016\026\023\004\041\013\046" +
    "\015\047\031\050\005\055\010\056\011\057\025\060\024" +
    "\061\023\062\006\063\021\064\033\065\030\066\007\001" +
    "\002\000\062\002\uffdf\004\uffdf\005\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\023\uffdf\041\uffdf\042\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\001" +
    "\002\000\054\004\017\005\020\012\012\013\022\014\032" +
    "\016\026\023\004\041\013\046\015\047\031\050\005\055" +
    "\010\056\011\057\025\060\024\061\023\062\006\063\021" +
    "\064\033\065\030\066\007\001\002\000\062\002\ufff6\004" +
    "\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\023\ufff6\041\ufff6\042\ufff6\046\ufff6\047\ufff6\050\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\001\002\000\054\004\017\005" +
    "\020\012\012\013\022\014\032\016\026\023\004\041\013" +
    "\046\015\047\031\050\005\055\010\056\011\057\025\060" +
    "\024\061\023\062\006\063\021\064\033\065\030\066\007" +
    "\001\002\000\062\002\ufff5\004\ufff5\005\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\016\ufff5\023\ufff5\041\ufff5\042\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\001\002\000\062\002\ufff9\004\ufff9\005\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\023\ufff9\041\ufff9\042\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\001\002\000\052\006\uffcf\010\uffcf\015\uffcf\017\uffcf\020" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\053\uffcf\054\uffcf\001\002\000\004\002\000\001\002" +
    "\000\056\004\017\005\020\012\012\013\022\014\032\016" +
    "\026\023\004\041\013\042\341\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\062\002\ufff8" +
    "\004\ufff8\005\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016" +
    "\ufff8\023\ufff8\041\ufff8\042\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\001\002\000\042\005\073" +
    "\023\004\040\071\046\015\047\031\050\005\055\010\056" +
    "\011\057\025\060\024\061\023\062\006\063\021\064\033" +
    "\065\030\066\007\001\002\000\012\006\344\032\065\043" +
    "\075\044\076\001\002\000\054\004\017\005\020\012\012" +
    "\013\022\014\032\016\026\023\004\041\013\046\015\047" +
    "\031\050\005\055\010\056\011\057\025\060\024\061\023" +
    "\062\006\063\021\064\033\065\030\066\007\001\002\000" +
    "\062\002\ufff3\004\ufff3\005\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\023\ufff3\041\ufff3\042\ufff3\046\ufff3\047" +
    "\ufff3\050\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\001\002\000" +
    "\056\006\uffa3\007\351\010\uffa3\015\uffa3\017\uffa3\020\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\352\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\037\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\350\053\uffa3\054\uffa3\001\002\000\052\006\uffd3\010" +
    "\uffd3\015\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\037\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\053\uffd3\054\uffd3\001\002" +
    "\000\004\062\346\001\002\000\004\063\356\001\002\000" +
    "\040\005\020\023\004\046\015\047\031\050\005\055\010" +
    "\056\011\057\025\060\024\061\023\062\006\063\021\064" +
    "\033\065\030\066\007\001\002\000\052\006\uffa1\010\uffa1" +
    "\015\uffa1\017\uffa1\020\uffa1\022\041\023\042\024\043\025" +
    "\044\027\uffa1\030\uffa1\031\uffa1\032\uffa1\037\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\354\053\uffa1\054\uffa1\001\002\000" +
    "\004\062\346\001\002\000\052\006\uffa0\010\uffa0\015\uffa0" +
    "\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\037\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\053\uffa0\054\uffa0\001\002\000\004\010" +
    "\357\001\002\000\054\006\uff9f\010\uff9f\015\uff9f\017\uff9f" +
    "\020\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\360\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\037\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\053\uff9f\054\uff9f\001\002\000\004\041" +
    "\361\001\002\000\040\005\020\023\004\046\015\047\031" +
    "\050\005\055\010\056\011\057\025\060\024\061\023\062" +
    "\006\063\021\064\033\065\030\066\007\001\002\000\004" +
    "\042\363\001\002\000\052\006\uff9e\010\uff9e\015\uff9e\017" +
    "\uff9e\020\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\037\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\053\uff9e\054\uff9e\001\002\000\052\006\uffa2" +
    "\010\uffa2\015\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\037\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\053\uffa2\054\uffa2\001" +
    "\002\000\052\006\uffd4\010\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\037\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\053\uffd4\054\uffd4\001\002\000\056\006\uffa9\007\370\010" +
    "\uffa9\015\uffa9\017\uffa9\020\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\371\027\uffa9\030\uffa9\031\uffa9\032\uffa9\037" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\367\053\uffa9\054\uffa9" +
    "\001\002\000\004\062\366\001\002\000\004\063\375\001" +
    "\002\000\040\005\020\023\004\046\015\047\031\050\005" +
    "\055\010\056\011\057\025\060\024\061\023\062\006\063" +
    "\021\064\033\065\030\066\007\001\002\000\052\006\uffa7" +
    "\010\uffa7\015\uffa7\017\uffa7\020\uffa7\022\041\023\042\024" +
    "\043\025\044\027\uffa7\030\uffa7\031\uffa7\032\uffa7\037\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\373\053\uffa7\054\uffa7\001" +
    "\002\000\004\062\366\001\002\000\052\006\uffa6\010\uffa6" +
    "\015\uffa6\017\uffa6\020\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\037\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\053\uffa6\054\uffa6\001\002\000" +
    "\004\010\376\001\002\000\054\006\uffa5\007\377\010\uffa5" +
    "\015\uffa5\017\uffa5\020\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\037\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\053\uffa5\054\uffa5\001\002\000" +
    "\004\063\u0100\001\002\000\004\010\u0101\001\002\000\052" +
    "\006\uffa4\010\uffa4\015\uffa4\017\uffa4\020\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\037\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\053\uffa4\054" +
    "\uffa4\001\002\000\052\006\uffa8\010\uffa8\015\uffa8\017\uffa8" +
    "\020\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\037\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\053\uffa8\054\uffa8\001\002\000\052\006\uffcd\010" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\037\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\053\uffcd\054\uffcd\001\002" +
    "\000\052\006\uffc4\010\uffc4\015\uffc4\017\uffc4\020\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\037\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\053" +
    "\uffc4\054\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\012\002\013\003\026\006\033\007\015\001" +
    "\001\000\004\007\u0103\001\001\000\004\007\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\364\001" +
    "\001\000\004\015\346\001\001\000\002\001\001\000\010" +
    "\003\337\006\033\007\015\001\001\000\002\001\001\000" +
    "\004\007\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\316\001\001\000\002\001\001\000\006\006" +
    "\310\007\015\001\001\000\004\017\305\001\001\000\004" +
    "\022\276\001\001\000\004\016\263\001\001\000\002\001" +
    "\001\000\006\006\240\007\015\001\001\000\002\001\001" +
    "\000\004\007\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\037\013\036\001\001" +
    "\000\006\007\071\011\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\231\001\001\000\004\007\230" +
    "\001\001\000\004\007\227\001\001\000\004\007\226\001" +
    "\001\000\010\007\047\010\053\011\052\001\001\000\002" +
    "\001\001\000\006\007\160\011\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\152\010\154\011\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\047\010\147\011\146\001\001\000\010\007\047\010\145" +
    "\011\120\001\001\000\010\007\047\010\062\011\061\001" +
    "\001\000\004\007\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\100\007\047\010" +
    "\144\011\143\001\001\000\006\007\071\011\073\001\001" +
    "\000\010\007\047\010\067\011\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\071\011\142\001\001" +
    "\000\002\001\001\000\006\007\122\011\123\001\001\000" +
    "\002\001\001\000\010\005\100\007\071\011\101\001\001" +
    "\000\006\007\071\011\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\047\010\121\011\120\001\001\000" +
    "\004\007\105\001\001\000\002\001\001\000\004\007\107" +
    "\001\001\000\002\001\001\000\004\007\115\001\001\000" +
    "\012\005\112\007\047\010\114\011\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\071\011\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\141\001\001" +
    "\000\004\007\140\001\001\000\002\001\001\000\004\007" +
    "\137\001\001\000\004\007\136\001\001\000\004\007\135" +
    "\001\001\000\004\007\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\047\010\225\011\120\001\001" +
    "\000\002\001\001\000\004\007\224\001\001\000\004\007" +
    "\223\001\001\000\004\007\222\001\001\000\004\007\210" +
    "\001\001\000\004\007\206\001\001\000\006\007\176\011" +
    "\177\001\001\000\010\007\047\010\172\011\120\001\001" +
    "\000\002\001\001\000\006\007\201\020\202\001\001\000" +
    "\006\007\200\011\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\201" +
    "\020\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\233\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\243" +
    "\010\245\011\244\001\001\000\006\007\254\021\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\254\021\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\275\001\001\000\002\001\001\000\004\007\270" +
    "\001\001\000\002\001\001\000\004\016\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\301\001\001\000\002\001\001\000\004\022\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\071\011\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\320\007\047\010\322\011\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\325\007\015\012\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\327\007\015\001\001" +
    "\000\002\001\001\000\010\006\325\007\015\012\331\001" +
    "\001\000\002\001\001\000\010\006\325\007\015\012\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\240\007\015\001\001" +
    "\000\002\001\001\000\006\007\071\011\342\001\001\000" +
    "\002\001\001\000\006\006\344\007\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\363\001\001\000\002\001\001\000\004\007\352\001\001" +
    "\000\002\001\001\000\004\015\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\201\020\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0101\001\001\000\002\001\001\000" +
    "\004\007\371\001\001\000\002\001\001\000\004\014\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.err.println("Error token " + s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error token " + s);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= listaSent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST a = new AST("ini", e, null); a.gc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= listaSent sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= PRINT AP exp CP PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("print", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP cond CP PYC 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("printcond", c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= PRINT AP boolexp CP PYC 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("printcond", b, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= PRINT AP ALL pArrayIni CLL CP PYC 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new AST("printArray", a ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= exp PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= ALL listaSent CLL 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= IF AP boolexp CP elseSent 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", b, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= IF AP cond CP elseSent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= IF AP forAllExp CP elseSent 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", f, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= DO sent WHILE AP cond CP PYC 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("doWhile",c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= WHILE AP cond CP sent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("while",c,s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent ::= FOR AP expFor CP sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("for", e, s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolexp ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("bool", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolexp ::= NOT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("not", new AST("bool", e, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolexp ::= boolexp AND boolexp 
            {
              AST RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolexp ::= boolexp OR boolexp 
            {
              AST RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolexp ::= boolexp IMPLICA boolexp 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("implica", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexp ::= cond AND boolexp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexp ::= cond OR boolexp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", c, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= boolexp AND cond 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= boolexp OR cond 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= IDENT OR boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", new AST("bool", new AST(i,null, null),null), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= IDENT AND boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", new AST("bool", new AST(i,null, null),null), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexp ::= AP boolexp CP 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolexp ::= TRUE IMPLICA TRUE 
            {
              AST RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("implica", new AST(t1, null, null), new AST(t2, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // forAllExp ::= FORALL IDENT COMA boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("forall", new AST(i, null, null), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAllExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // forAllExp ::= FORALL IDENT FROM exp TO exp COMA cond 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("forallInt", new AST(i, e1, e2), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAllExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // forAllExp ::= FORALL IDENT FROM exp TO exp COMA boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("forallInt", new AST(i, e1, e2), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAllExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // forAllExp ::= FORALL IDENT FROM exp TO exp STEP exp COMA cond 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e3 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("forallIntStep", new AST(i, e1, e2), new AST("step", e3, c)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAllExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // forAllExp ::= FORALL IDENT FROM exp TO exp COMA forAllExp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("forallInt", new AST(i, e1, e2), f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAllExp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elseSent ::= sent ELSE sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elseSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expFor ::= exp PYC cond PYC exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expFor ::= exp PYC boolexp PYC exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", b, new AST("aux", e1, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expFor ::= PYC cond PYC exp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expFor ::= exp PYC boolexp PYC 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", b, new AST("aux", e1, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expFor ::= exp PYC cond PYC 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expFor ::= PYC cond PYC 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= NUM 
            {
              AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("num", new AST(n, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= REAL 
            {
              AST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("real", new AST(r, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= ASCII 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ascii", new AST(a, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= INT listaEnteros 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("int", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= CHAR listaChar 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("char", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= BOOLEAN listaBool 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolean", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= FLOAT listaReales 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("float", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= STRING expString 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("string", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= CASTCHAR exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castChar", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= CASTINT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castInt", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= CASTFLOAT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castFloat", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp MAS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mas", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= IDENT MASIGUAL exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("masIgual", new AST(i, null, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= IDENT MENOSIGUAL exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menosIgual", new AST(i, null, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= IDENT PORIGUAL exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("porIgual", new AST(i, null, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= IDENT DIVIGUAL exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("divIgual", new AST(i, null, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp MENOS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menos", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp POR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("por", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp DIV exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("div", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= MENOS exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menosUnario", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asig", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= IDENT ASIG TRUE 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBool", new AST(i, null, null), new AST(t, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= IDENT ASIG cond 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBool", new AST(i, null, null), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= IDENT ASIG NOT exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBool", new AST(i, null, null), new AST("not", e, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= IDENT AC exp CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), new AST(n, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= IDENT AC NUM CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, new AST(n, null, null), null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= IDENT AC NUM CC AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("matPos", new AST(i, null, null), new AST ("posicion", new AST (n1, null, null), new AST (n2,null ,null))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= IDENT AC exp CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, e1, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= IDENT ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniArray", new AST(i, null, null), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ident", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= AP exp CP 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= IDENT LENGTH 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("length", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= CADENA 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("cadena", null, new AST(c, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond ::= exp IGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("igual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond ::= exp DIF exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("distinto", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= exp MENOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= exp MENORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= exp MAYOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= exp MAYORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond ::= cond AND cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond ::= cond AND forAllExp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cond ::= cond OR cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cond ::= cond IMPLICA cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("implica", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond ::= NOT cond 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("not", c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond ::= AP cond CP 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaEnteros ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaEnteros ::= IDENT COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // listaEnteros ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // listaEnteros ::= IDENT ASIG exp COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // listaEnteros ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayInt", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listaEnteros ::= IDENT AC NUM CC AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("matDecl", new AST(i, null, null), new AST ("dimensiones", new AST (n1, null, null), new AST (n2,null ,null))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listaChar ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // listaChar ::= IDENT COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listaChar ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // listaChar ::= IDENT ASIG exp COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // listaChar ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayChar", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // listaChar ::= IDENT AC NUM CC ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniAsigArrayCh",new AST("iniArray", new AST(i, null, null),a), 
																			new AST("arrayChar", new AST(i, null, null), new AST(n,null,null))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // listaReales ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listaReales ::= IDENT COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listaReales ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // listaReales ::= IDENT ASIG exp COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // listaReales ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayFloat", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // listaBool ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBool",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // listaBool ::= IDENT COMA listaBool 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBool",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arrayIni ::= exp COMA arrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pArrayIni ::= exp COMA pArrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pArrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expString ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", new AST(i ,e ,null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expString",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expString ::= IDENT ASIG exp COMA expString 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", new AST(i ,e ,null),  e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expString",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
